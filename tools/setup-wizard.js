#!/usr/bin/env node

const readline = require('readline');
const fs = require('fs');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

console.log(`
üöÄ WorkPilot Setup Wizard
========================

This wizard will help you configure all your API keys and credentials in one place.
We'll walk through each service step by step.

Press Ctrl+C anytime to exit.
`);

const config = {};

function askQuestion(question, defaultValue = '') {
    return new Promise((resolve) => {
        const prompt = defaultValue ? `${question} (${defaultValue}): ` : `${question}: `;
        rl.question(prompt, (answer) => {
            resolve(answer.trim() || defaultValue);
        });
    });
}

async function collectOpenAIConfig() {
    console.log('\nü§ñ OpenAI Configuration');
    console.log('======================');
    console.log('Get your API key from: https://platform.openai.com/api-keys');

    config.OPENAI_API_KEY = await askQuestion('Enter your OpenAI API key');

    if (!config.OPENAI_API_KEY) {
        console.log('‚ö†Ô∏è  Warning: OpenAI API key is required for AI processing');
    }
}

async function collectSlackConfig() {
    console.log('\nüí¨ Slack Configuration');
    console.log('======================');
    console.log('Create a Slack app at: https://api.slack.com/apps');

    const useSlack = await askQuestion('Do you want to configure Slack? (y/n)', 'y');

    if (useSlack.toLowerCase() === 'y') {
        config.SLACK_BOT_TOKEN = await askQuestion('Enter your Slack Bot Token (xoxb-...)');
        config.SLACK_WEBHOOK_URL = await askQuestion('Enter your Slack Webhook URL (optional)');
    } else {
        config.SLACK_BOT_TOKEN = '';
        config.SLACK_WEBHOOK_URL = '';
    }
}

async function collectJiraConfig() {
    console.log('\nüéØ Jira Configuration');
    console.log('=====================');
    console.log('Get your API token from: https://id.atlassian.com/manage-profile/security/api-tokens');

    const useJira = await askQuestion('Do you want to configure Jira? (y/n)', 'y');

    if (useJira.toLowerCase() === 'y') {
        config.JIRA_DOMAIN = await askQuestion('Enter your Jira domain (e.g., company.atlassian.net)');
        config.JIRA_EMAIL = await askQuestion('Enter your Jira email address');
        config.JIRA_API_TOKEN = await askQuestion('Enter your Jira API token');
        config.JIRA_DEFAULT_PROJECT = await askQuestion('Enter your default Jira project key', 'WORK');
    } else {
        config.JIRA_DOMAIN = '';
        config.JIRA_EMAIL = '';
        config.JIRA_API_TOKEN = '';
        config.JIRA_DEFAULT_PROJECT = 'WORK';
    }
}

async function collectNotionConfig() {
    console.log('\nüìã Notion Configuration');
    console.log('========================');
    console.log('Create an integration at: https://www.notion.so/my-integrations');

    const useNotion = await askQuestion('Do you want to configure Notion? (y/n)', 'y');

    if (useNotion.toLowerCase() === 'y') {
        config.NOTION_TOKEN = await askQuestion('Enter your Notion Integration Token');
        config.NOTION_DEFAULT_PAGE_ID = await askQuestion('Enter your Notion Database ID (optional)');
    } else {
        config.NOTION_TOKEN = '';
        config.NOTION_DEFAULT_PAGE_ID = '';
    }
}

async function collectAppConfig() {
    console.log('\n‚öôÔ∏è  Application Configuration');
    console.log('=============================');

    config.NODE_ENV = await askQuestion('Environment (development/production)', 'development');
    config.PORT = await askQuestion('Backend port', '3001');
}

function generateEnvFile() {
    const envContent = `# WorkPilot Configuration
# Generated by Setup Wizard on ${new Date().toISOString()}

# OpenAI Configuration
OPENAI_API_KEY=${config.OPENAI_API_KEY}

# Slack Configuration
SLACK_BOT_TOKEN=${config.SLACK_BOT_TOKEN}
SLACK_WEBHOOK_URL=${config.SLACK_WEBHOOK_URL}

# Jira Configuration
JIRA_API_TOKEN=${config.JIRA_API_TOKEN}
JIRA_DOMAIN=${config.JIRA_DOMAIN}
JIRA_EMAIL=${config.JIRA_EMAIL}
JIRA_DEFAULT_PROJECT=${config.JIRA_DEFAULT_PROJECT}

# Notion Configuration
NOTION_TOKEN=${config.NOTION_TOKEN}
NOTION_DEFAULT_PAGE_ID=${config.NOTION_DEFAULT_PAGE_ID}

# Application Configuration
NODE_ENV=${config.NODE_ENV}
PORT=${config.PORT}
`;

    fs.writeFileSync('.env', envContent);
    console.log('\n‚úÖ Configuration saved to .env file!');
}

function displaySummary() {
    console.log('\nüîÑ Configuration Summary');
    console.log('========================');

    console.log(`ü§ñ OpenAI: ${config.OPENAI_API_KEY ? '‚úÖ Configured' : '‚ùå Not configured'}`);
    console.log(`üí¨ Slack: ${config.SLACK_BOT_TOKEN ? '‚úÖ Configured' : '‚ùå Not configured'}`);
    console.log(`üéØ Jira: ${config.JIRA_API_TOKEN ? '‚úÖ Configured' : '‚ùå Not configured'}`);
    console.log(`üìã Notion: ${config.NOTION_TOKEN ? '‚úÖ Configured' : '‚ùå Not configured'}`);

    console.log('\nüöÄ Next Steps:');
    console.log('1. Run: docker-compose up -d');
    console.log('2. Open: http://localhost (port 80)');
    console.log('3. Start processing meetings!');

    if (!config.OPENAI_API_KEY) {
        console.log('\n‚ö†Ô∏è  Note: You need at least OpenAI API key for basic functionality');
    }
}

async function main() {
    try {
        await collectOpenAIConfig();
        await collectSlackConfig();
        await collectJiraConfig();
        await collectNotionConfig();
        await collectAppConfig();

        console.log('\nüîÑ Generating configuration...');
        generateEnvFile();
        displaySummary();

    } catch (error) {
        console.log('\n‚ùå Setup cancelled or error occurred:', error.message);
    } finally {
        rl.close();
    }
}

main();
